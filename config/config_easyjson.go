// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package config

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6615c02eDecodeECConfig(in *jlexer.Lexer, out *WaitingACKItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SID":
			out.SID = int(in.Int())
		case "BlockID":
			out.BlockID = int(in.Int())
		case "RequiredACK":
			out.RequiredACK = int(in.Int())
		case "ACKReceiverIP":
			out.ACKReceiverIP = string(in.String())
		case "ACKSenderIP":
			out.ACKSenderIP = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeECConfig(out *jwriter.Writer, in WaitingACKItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.SID))
	}
	{
		const prefix string = ",\"BlockID\":"
		out.RawString(prefix)
		out.Int(int(in.BlockID))
	}
	{
		const prefix string = ",\"RequiredACK\":"
		out.RawString(prefix)
		out.Int(int(in.RequiredACK))
	}
	{
		const prefix string = ",\"ACKReceiverIP\":"
		out.RawString(prefix)
		out.String(string(in.ACKReceiverIP))
	}
	{
		const prefix string = ",\"ACKSenderIP\":"
		out.RawString(prefix)
		out.String(string(in.ACKSenderIP))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WaitingACKItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeECConfig(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WaitingACKItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeECConfig(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WaitingACKItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeECConfig(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WaitingACKItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeECConfig(l, v)
}
func easyjson6615c02eDecodeECConfig1(in *jlexer.Lexer, out *UserRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Timestamp":
			out.Timestamp = uint64(in.Uint64())
		case "WorkloadName":
			out.WorkloadName = string(in.String())
		case "VolumeID":
			out.VolumeID = int(in.Int())
		case "OperationType":
			out.OperationType = string(in.String())
		case "AccessOffset":
			out.AccessOffset = int(in.Int())
		case "OperatedSize":
			out.OperatedSize = int(in.Int())
		case "DurationTime":
			out.DurationTime = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeECConfig1(out *jwriter.Writer, in UserRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Timestamp\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Timestamp))
	}
	{
		const prefix string = ",\"WorkloadName\":"
		out.RawString(prefix)
		out.String(string(in.WorkloadName))
	}
	{
		const prefix string = ",\"VolumeID\":"
		out.RawString(prefix)
		out.Int(int(in.VolumeID))
	}
	{
		const prefix string = ",\"OperationType\":"
		out.RawString(prefix)
		out.String(string(in.OperationType))
	}
	{
		const prefix string = ",\"AccessOffset\":"
		out.RawString(prefix)
		out.Int(int(in.AccessOffset))
	}
	{
		const prefix string = ",\"OperatedSize\":"
		out.RawString(prefix)
		out.Int(int(in.OperatedSize))
	}
	{
		const prefix string = ",\"DurationTime\":"
		out.RawString(prefix)
		out.Int(int(in.DurationTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeECConfig1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeECConfig1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeECConfig1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeECConfig1(l, v)
}
func easyjson6615c02eDecodeECConfig2(in *jlexer.Lexer, out *UpdateStripe) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "StripeID":
			out.StripeID = int(in.Int())
		case "DataIDs":
			if in.IsNull() {
				in.Skip()
				out.DataIDs = nil
			} else {
				in.Delim('[')
				if out.DataIDs == nil {
					if !in.IsDelim(']') {
						out.DataIDs = make([]int, 0, 8)
					} else {
						out.DataIDs = []int{}
					}
				} else {
					out.DataIDs = (out.DataIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int
					v1 = int(in.Int())
					out.DataIDs = append(out.DataIDs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ParityIDs":
			if in.IsNull() {
				in.Skip()
				out.ParityIDs = nil
			} else {
				in.Delim('[')
				if out.ParityIDs == nil {
					if !in.IsDelim(']') {
						out.ParityIDs = make([]int, 0, 8)
					} else {
						out.ParityIDs = []int{}
					}
				} else {
					out.ParityIDs = (out.ParityIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v2 int
					v2 = int(in.Int())
					out.ParityIDs = append(out.ParityIDs, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeECConfig2(out *jwriter.Writer, in UpdateStripe) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"StripeID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.StripeID))
	}
	{
		const prefix string = ",\"DataIDs\":"
		out.RawString(prefix)
		if in.DataIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.DataIDs {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ParityIDs\":"
		out.RawString(prefix)
		if in.ParityIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.ParityIDs {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateStripe) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeECConfig2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateStripe) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeECConfig2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateStripe) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeECConfig2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateStripe) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeECConfig2(l, v)
}
func easyjson6615c02eDecodeECConfig3(in *jlexer.Lexer, out *TD) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SID":
			out.SID = int(in.Int())
		case "BlockID":
			out.BlockID = int(in.Int())
		case "SendSize":
			out.SendSize = int(in.Int())
		case "ToIP":
			out.ToIP = string(in.String())
		case "FromIP":
			out.FromIP = string(in.String())
		case "Buff":
			if in.IsNull() {
				in.Skip()
				out.Buff = nil
			} else {
				out.Buff = in.Bytes()
			}
		case "MultiTargetIPs":
			if in.IsNull() {
				in.Skip()
				out.MultiTargetIPs = nil
			} else {
				in.Delim('[')
				if out.MultiTargetIPs == nil {
					if !in.IsDelim(']') {
						out.MultiTargetIPs = make([]string, 0, 4)
					} else {
						out.MultiTargetIPs = []string{}
					}
				} else {
					out.MultiTargetIPs = (out.MultiTargetIPs)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.MultiTargetIPs = append(out.MultiTargetIPs, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeECConfig3(out *jwriter.Writer, in TD) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.SID))
	}
	{
		const prefix string = ",\"BlockID\":"
		out.RawString(prefix)
		out.Int(int(in.BlockID))
	}
	{
		const prefix string = ",\"SendSize\":"
		out.RawString(prefix)
		out.Int(int(in.SendSize))
	}
	{
		const prefix string = ",\"ToIP\":"
		out.RawString(prefix)
		out.String(string(in.ToIP))
	}
	{
		const prefix string = ",\"FromIP\":"
		out.RawString(prefix)
		out.String(string(in.FromIP))
	}
	{
		const prefix string = ",\"Buff\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Buff)
	}
	{
		const prefix string = ",\"MultiTargetIPs\":"
		out.RawString(prefix)
		if in.MultiTargetIPs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.MultiTargetIPs {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TD) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeECConfig3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TD) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeECConfig3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TD) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeECConfig3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TD) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeECConfig3(l, v)
}
func easyjson6615c02eDecodeECConfig4(in *jlexer.Lexer, out *ReqType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = OPType(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeECConfig4(out *jwriter.Writer, in ReqType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReqType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeECConfig4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReqType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeECConfig4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReqType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeECConfig4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReqType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeECConfig4(l, v)
}
func easyjson6615c02eDecodeECConfig5(in *jlexer.Lexer, out *ReqData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SID":
			out.SID = int(in.Int())
		case "BlockID":
			out.BlockID = int(in.Int())
		case "AckID":
			out.AckID = int(in.Int())
		case "StripeID":
			out.StripeID = int(in.Int())
		case "RangeLeft":
			out.RangeLeft = int(in.Int())
		case "RangeRight":
			out.RangeRight = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeECConfig5(out *jwriter.Writer, in ReqData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.SID))
	}
	{
		const prefix string = ",\"BlockID\":"
		out.RawString(prefix)
		out.Int(int(in.BlockID))
	}
	{
		const prefix string = ",\"AckID\":"
		out.RawString(prefix)
		out.Int(int(in.AckID))
	}
	{
		const prefix string = ",\"StripeID\":"
		out.RawString(prefix)
		out.Int(int(in.StripeID))
	}
	{
		const prefix string = ",\"RangeLeft\":"
		out.RawString(prefix)
		out.Int(int(in.RangeLeft))
	}
	{
		const prefix string = ",\"RangeRight\":"
		out.RawString(prefix)
		out.Int(int(in.RangeRight))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReqData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeECConfig5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReqData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeECConfig5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReqData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeECConfig5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReqData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeECConfig5(l, v)
}
func easyjson6615c02eDecodeECConfig6(in *jlexer.Lexer, out *Rack) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Nodes":
			if in.IsNull() {
				in.Skip()
				out.Nodes = nil
			} else {
				in.Delim('[')
				if out.Nodes == nil {
					if !in.IsDelim(']') {
						out.Nodes = make([]string, 0, 4)
					} else {
						out.Nodes = []string{}
					}
				} else {
					out.Nodes = (out.Nodes)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.Nodes = append(out.Nodes, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "NodeNum":
			out.NodeNum = int(in.Int())
		case "NumOfUpdates":
			out.NumOfUpdates = int(in.Int())
		case "Stripes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Stripes = make(map[int][]int)
				for !in.IsDelim('}') {
					key := int(in.IntStr())
					in.WantColon()
					var v14 []int
					if in.IsNull() {
						in.Skip()
						v14 = nil
					} else {
						in.Delim('[')
						if v14 == nil {
							if !in.IsDelim(']') {
								v14 = make([]int, 0, 8)
							} else {
								v14 = []int{}
							}
						} else {
							v14 = (v14)[:0]
						}
						for !in.IsDelim(']') {
							var v15 int
							v15 = int(in.Int())
							v14 = append(v14, v15)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Stripes)[key] = v14
					in.WantComma()
				}
				in.Delim('}')
			}
		case "GateIP":
			out.GateIP = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeECConfig6(out *jwriter.Writer, in Rack) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Nodes\":"
		out.RawString(prefix[1:])
		if in.Nodes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v16, v17 := range in.Nodes {
				if v16 > 0 {
					out.RawByte(',')
				}
				out.String(string(v17))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"NodeNum\":"
		out.RawString(prefix)
		out.Int(int(in.NodeNum))
	}
	{
		const prefix string = ",\"NumOfUpdates\":"
		out.RawString(prefix)
		out.Int(int(in.NumOfUpdates))
	}
	{
		const prefix string = ",\"Stripes\":"
		out.RawString(prefix)
		if in.Stripes == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v18First := true
			for v18Name, v18Value := range in.Stripes {
				if v18First {
					v18First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v18Name))
				out.RawByte(':')
				if v18Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v19, v20 := range v18Value {
						if v19 > 0 {
							out.RawByte(',')
						}
						out.Int(int(v20))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"GateIP\":"
		out.RawString(prefix)
		out.String(string(in.GateIP))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Rack) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeECConfig6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Rack) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeECConfig6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Rack) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeECConfig6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Rack) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeECConfig6(l, v)
}
func easyjson6615c02eDecodeECConfig7(in *jlexer.Lexer, out *Policy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = int(in.Int())
		case "NumOfMB":
			out.NumOfMB = int(in.Int())
		case "TraceName":
			out.TraceName = string(in.String())
		case "Multicast":
			out.Multicast = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeECConfig7(out *jwriter.Writer, in Policy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"NumOfMB\":"
		out.RawString(prefix)
		out.Int(int(in.NumOfMB))
	}
	{
		const prefix string = ",\"TraceName\":"
		out.RawString(prefix)
		out.String(string(in.TraceName))
	}
	{
		const prefix string = ",\"Multicast\":"
		out.RawString(prefix)
		out.Bool(bool(in.Multicast))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Policy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeECConfig7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Policy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeECConfig7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Policy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeECConfig7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Policy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeECConfig7(l, v)
}
func easyjson6615c02eDecodeECConfig8(in *jlexer.Lexer, out *MetaInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "StripeID":
			out.StripeID = int(in.Int())
		case "BlockID":
			out.BlockID = int(in.Int())
		case "ChunkStoreIndex":
			out.ChunkStoreIndex = int(in.Int())
		case "RelatedParityIPs":
			if in.IsNull() {
				in.Skip()
				out.RelatedParityIPs = nil
			} else {
				in.Delim('[')
				if out.RelatedParityIPs == nil {
					if !in.IsDelim(']') {
						out.RelatedParityIPs = make([]string, 0, 4)
					} else {
						out.RelatedParityIPs = []string{}
					}
				} else {
					out.RelatedParityIPs = (out.RelatedParityIPs)[:0]
				}
				for !in.IsDelim(']') {
					var v21 string
					v21 = string(in.String())
					out.RelatedParityIPs = append(out.RelatedParityIPs, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "BlockIP":
			out.BlockIP = string(in.String())
		case "DataNodeID":
			out.DataNodeID = int(in.Int())
		case "RackID":
			out.RackID = int(in.Int())
		case "SectionID":
			out.SectionID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeECConfig8(out *jwriter.Writer, in MetaInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"StripeID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.StripeID))
	}
	{
		const prefix string = ",\"BlockID\":"
		out.RawString(prefix)
		out.Int(int(in.BlockID))
	}
	{
		const prefix string = ",\"ChunkStoreIndex\":"
		out.RawString(prefix)
		out.Int(int(in.ChunkStoreIndex))
	}
	{
		const prefix string = ",\"RelatedParityIPs\":"
		out.RawString(prefix)
		if in.RelatedParityIPs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v22, v23 := range in.RelatedParityIPs {
				if v22 > 0 {
					out.RawByte(',')
				}
				out.String(string(v23))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"BlockIP\":"
		out.RawString(prefix)
		out.String(string(in.BlockIP))
	}
	{
		const prefix string = ",\"DataNodeID\":"
		out.RawString(prefix)
		out.Int(int(in.DataNodeID))
	}
	{
		const prefix string = ",\"RackID\":"
		out.RawString(prefix)
		out.Int(int(in.RackID))
	}
	{
		const prefix string = ",\"SectionID\":"
		out.RawString(prefix)
		out.Int(int(in.SectionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MetaInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeECConfig8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetaInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeECConfig8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetaInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeECConfig8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetaInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeECConfig8(l, v)
}
func easyjson6615c02eDecodeECConfig9(in *jlexer.Lexer, out *MTU) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sid":
			out.SID = int(in.Int())
		case "block_id":
			out.BlockID = int(in.Int())
		case "index":
			out.Index = int(in.Int())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		case "from_ip":
			out.FromIP = string(in.String())
		case "multi_target_ips":
			if in.IsNull() {
				in.Skip()
				out.MultiTargetIPs = nil
			} else {
				in.Delim('[')
				if out.MultiTargetIPs == nil {
					if !in.IsDelim(']') {
						out.MultiTargetIPs = make([]string, 0, 4)
					} else {
						out.MultiTargetIPs = []string{}
					}
				} else {
					out.MultiTargetIPs = (out.MultiTargetIPs)[:0]
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.MultiTargetIPs = append(out.MultiTargetIPs, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_fragment":
			out.IsFragment = bool(in.Bool())
		case "fragment_id":
			out.FragmentID = int(in.Int())
		case "fragment_count":
			out.FragmentCount = int(in.Int())
		case "send_size":
			out.SendSize = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeECConfig9(out *jwriter.Writer, in MTU) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SID != 0 {
		const prefix string = ",\"sid\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.SID))
	}
	if in.BlockID != 0 {
		const prefix string = ",\"block_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BlockID))
	}
	if in.Index != 0 {
		const prefix string = ",\"index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Index))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Data)
	}
	if in.FromIP != "" {
		const prefix string = ",\"from_ip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FromIP))
	}
	if len(in.MultiTargetIPs) != 0 {
		const prefix string = ",\"multi_target_ips\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v28, v29 := range in.MultiTargetIPs {
				if v28 > 0 {
					out.RawByte(',')
				}
				out.String(string(v29))
			}
			out.RawByte(']')
		}
	}
	if in.IsFragment {
		const prefix string = ",\"is_fragment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsFragment))
	}
	if in.FragmentID != 0 {
		const prefix string = ",\"fragment_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FragmentID))
	}
	if in.FragmentCount != 0 {
		const prefix string = ",\"fragment_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FragmentCount))
	}
	if in.SendSize != 0 {
		const prefix string = ",\"send_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SendSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MTU) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeECConfig9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MTU) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeECConfig9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MTU) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeECConfig9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MTU) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeECConfig9(l, v)
}
func easyjson6615c02eDecodeECConfig10(in *jlexer.Lexer, out *CMD) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SID":
			out.SID = int(in.Int())
		case "StripeID":
			out.StripeID = int(in.Int())
		case "BlockID":
			out.BlockID = int(in.Int())
		case "FromIP":
			out.FromIP = string(in.String())
		case "ToIPs":
			if in.IsNull() {
				in.Skip()
				out.ToIPs = nil
			} else {
				in.Delim('[')
				if out.ToIPs == nil {
					if !in.IsDelim(']') {
						out.ToIPs = make([]string, 0, 4)
					} else {
						out.ToIPs = []string{}
					}
				} else {
					out.ToIPs = (out.ToIPs)[:0]
				}
				for !in.IsDelim(']') {
					var v30 string
					v30 = string(in.String())
					out.ToIPs = append(out.ToIPs, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Helpers":
			if in.IsNull() {
				in.Skip()
				out.Helpers = nil
			} else {
				in.Delim('[')
				if out.Helpers == nil {
					if !in.IsDelim(']') {
						out.Helpers = make([]int, 0, 8)
					} else {
						out.Helpers = []int{}
					}
				} else {
					out.Helpers = (out.Helpers)[:0]
				}
				for !in.IsDelim(']') {
					var v31 int
					v31 = int(in.Int())
					out.Helpers = append(out.Helpers, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Matched":
			out.Matched = int(in.Int())
		case "SendSize":
			out.SendSize = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeECConfig10(out *jwriter.Writer, in CMD) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.SID))
	}
	{
		const prefix string = ",\"StripeID\":"
		out.RawString(prefix)
		out.Int(int(in.StripeID))
	}
	{
		const prefix string = ",\"BlockID\":"
		out.RawString(prefix)
		out.Int(int(in.BlockID))
	}
	{
		const prefix string = ",\"FromIP\":"
		out.RawString(prefix)
		out.String(string(in.FromIP))
	}
	{
		const prefix string = ",\"ToIPs\":"
		out.RawString(prefix)
		if in.ToIPs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.ToIPs {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.String(string(v33))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Helpers\":"
		out.RawString(prefix)
		if in.Helpers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v34, v35 := range in.Helpers {
				if v34 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v35))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Matched\":"
		out.RawString(prefix)
		out.Int(int(in.Matched))
	}
	{
		const prefix string = ",\"SendSize\":"
		out.RawString(prefix)
		out.Int(int(in.SendSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CMD) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeECConfig10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CMD) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeECConfig10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CMD) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeECConfig10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CMD) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeECConfig10(l, v)
}
func easyjson6615c02eDecodeECConfig11(in *jlexer.Lexer, out *ACK) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SID":
			out.SID = int(in.Int())
		case "AckID":
			out.AckID = int(in.Int())
		case "BlockID":
			out.BlockID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeECConfig11(out *jwriter.Writer, in ACK) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.SID))
	}
	{
		const prefix string = ",\"AckID\":"
		out.RawString(prefix)
		out.Int(int(in.AckID))
	}
	{
		const prefix string = ",\"BlockID\":"
		out.RawString(prefix)
		out.Int(int(in.BlockID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ACK) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeECConfig11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ACK) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeECConfig11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ACK) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeECConfig11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ACK) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeECConfig11(l, v)
}
